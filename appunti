(* This is an OCaml editor.
   Enter your program here and send it to the toplevel using the "Eval code"
   button or [Ctrl-e]. *) 



(* int ∗ (int → int) → bool → int *)

(*
  let f1 pair b = if fst(pair) == 13 && snd(pair)(3) == 3 && b then 0 else 1;; 

  let f1 a b =
    let f12 k = k +5 in
    if a == (3, f12) && b then 2 else 3;; *)

(*
(* (int → bool) → int ∗ bool → int *)
  
  let f2 a b = if a(3) && fst(b) == 111 && snd(b) then 0 else 1;;

(* (int → bool ∗ int) → int → int *)

  let f3 a b = if fst(a(3)) && snd(a(2)) == 4 && b == 42342 then 0 else 0;;

(* (int → bool) ∗ (int → bool) → int → int *)

  let f10 j k = if fst(j)(2) && snd(j)(3) && k == 0 then 1 else 2;;

  let f3 x y = if x(1) == (true, 1) && y == 0  then 0 else 1;;

(* (int → int) → int → int → bool *)

  let f18 a b c = if a(3) == 12 && b == 1 && c == 2 then true else false;;

(* ((int -> int) * int -> int) -> int -> bool *) 

  let mirko a b = 
    let mirketto j = j+22 in
    if a(mirketto, 2) == 2 && b == 2 then true else false;;



  let foo a b c = if a(b) == 4 && c == 3 then b else b;;


  let foo a b c = if a == [] && b == [] || c(List.hd b) == List.hd a then a else a;;

*)

(*
  let rec fool l n v = 
    List.fold_right(fun b c -> if List.length c >= n then b :: c else v :: c) l [];;
    
  fool [1;2;3;4;5;6;7;8;9;10] 3 0;;

  let comp f g x = 
    match g(x) with
      n when x mod g(x) == 0 -> g(x)
    | n when f(x) + g(x) > 0 -> f(x) + g(x)
    | _ -> (f(x) + g(x))*(-1);;

  let foo a b c = if a(b) == 3 && c == 3 then b else b;;

  let comp f g x =
    match g(x+0) with
      n when n mod 2 == 0 && (g(x) - f(x)) < 0 -> (g(x) - f(x)) * (-1) 
    | n when n mod 2 == 0 && (g(x) - f(x)) >= 0 -> (g(x) - f(x))
    | _ -> 2 * f(x);;

  let foo a b c = if a == [] && b == [] && c == List.hd(b) then List.hd(a) else List.hd(a);;

  let fool l n v =
    List.fold_right(fun a b -> if List.length l - List.length b > n then v::b else a::b) l [];;

  fool [1;2;3;4;5;6;7;8;9;10] 3 0;;

  let foo a b c = if a == [] && b == [] && c(List.hd(b)) == List.hd(a) then a else a;; *)
(*

  let foo a b = if a(1) == a(1) then a(1) else a(1);;

  let comp f g x =
    match g(x) with 
      n when g(x)>=f(x) && x mod 2 == 0 -> 2*g(x)
    | n when g(x)<f(x) && x mod 2 == 0 -> 2*f(x)
    | n -> f(x);;

           
  let comp f g x = if (x mod 2 = 0) 
    then 2 * (max (g x) (f x) )
    else f x;;

  let rec foo f a = match (a) with
      (x1::tl) -> f(x1);;

  let foo f a = 
    match a
    with x::y::tl when a==[] && f(x) == f(y)-> f(y);;

  let fool l n v = 
    List.fold_right(fun a b-> if List.length(b) < n then a::b else v::b) l [];;

  fool [1;2;3;4;5;6;7;8;9;10] 3 0;;


  let foo a f = match a
    with x::y::tl when f(x) == f(y) ->(x,f(y));; *)
(*
  let foo f a int = if f(a)==1+int then a else a;;

  let rec a n =
    match n with
      0->0
    | n when b(n-1) mod 2 == 0-> 2*b(n-1)+1
    | n -> 2*b(n-1)
  and b n =
    match n with
      0->1
    | n when n mod 2 !=0 -> a(n-1)+1
    | n -> a(n);;

  let seq n = (a(n), b(n));; 

let rec a n =
  match n with
    0->1
  | n when b(n-1) mod 2 !=0 -> a(n-1)
  | n -> a(n-1)*b(n-1)
and b n =
  match n with
    0->1
  | n when a(n-1) mod 2 !=0 -> a(n-1)+b(n-1)
  | n -> a(n-1)*b(n-1);;

let seq n = (a(n), b(n));;

let foo f = if f(3) == f(3) then f(3) else f(3);;
  

let fool l l' n = *)

(*Es1 - Scrivere una funzione foo con il seguente tipo:
  foo: 'a list -> b' list -> ('a * 'b) list *)

(*
  let foo a b = if a==[] && b==[] then [(List.hd(a), List.hd(b))] else [(List.hd(a), List.hd(b))];;

  let foof l = List.fold_right (fun a b -> if List.length b = 1 then b else a::b) l [];;
  foof [1;2;3;4;5;6;7;8;9;10];; 

  let rec fool l1 l2 n = match (l1,l2) with
      ([],[]) -> if n>0 then failwith "non ci sono abbastanza elementi!" else []
    | (hd::tl,[]) -> if n>0 then hd :: fool tl [] (n-1) else []
    | ([],hd::tl) -> if n>0 then hd :: fool [] tl (n-1) else []
    | (h1::t1,h2::t2) -> if n>1 then h1 :: h2 :: fool t1 t2 (n-2) else if n=1 then h1 :: fool t1 t2 (n-1) else [];;

  fool [2;6;7;8;9;10] [1;2;44;8;10] 5;; *)
(*
  let foo f a = if f(3)== a then 0 else 0;;

  let rec a n = 
    match n with
      0->1
    | n when n-1 mod 2 == 0 -> a(n-1)+1
    | n -> a(n-1) + b(n-1) 
  and b n =
    match n with
      0 ->0
    | n when n-1 mod 2 == 0 -> a(n-1) + b(n-1)
    | n -> b(n-1)+1;;

  let seq n = (a(n),b(n));;

  let comp f g x =
    match x with
      x when x mod 2 == 0 && g(x)>=f(x) ->2*g(x)
    | x when x mod 2 == 0 && g(x)<f(x) ->2*f(x)
    | x -> f(x);;

  let foo a b = if a == [] && b == [] then [(List.hd(a),List.hd(b))] else [(List.hd(a),List.hd(b))];;

  let foo f a = if f(List.hd(a)) == f(List.hd(a)) && a==[] then (f(List.hd(a)),f(List.hd(a))) else (f(List.hd(a)),f(List.hd(a)));;
*)(*
  let rec fool l n f = match l with
      []->[]
    | (hd::tl) when n>0 && List.length(tl)>0 -> f(hd) :: fool tl (n-1) f 
    | (hd::tl) -> (hd::tl);;

  fool [1;2;3;4;5;6;7;8;9;10] 5 (fun x -> x*3);;

  let rec fool l n f = match l with
      []->[]
    | (hd::tl) when List.length(tl)>=n && n>0 -> hd::fool tl (n) f
    | (hd::tl) when List.length(tl)<n && n>0 -> f(hd)::fool tl (n-1) f 
    | (hd::tl) -> (hd::tl);;

  fool [1;2;3;4;5;6;7;8;9;10] 5 (fun x -> x*2);;

  let foo f v = 
    let fee a = a+10 in
    if f(fee, v) == 3 && v == 3 then true else false;;

  let foo a b f =
    if a == b && f(3) == 4 then 1 else 1;;

  let foo f a = if f(List.hd(a)) == f(List.hd(a)) && a == [] then (a,a) else (a,a);;

  let foo a b f = if a == [] && b == [] && f(List.hd(a)) == List.hd(b) then b else b;;

  let rec fool l n f = match l with
      []->[]
    | hd::tl when n>0 && f(hd) -> hd::fool tl (n-1) f 
    | hd::tl when n>0 && f(hd)==false -> fool tl (n) f 
    | hd::tl when n=0 -> [] 
    | hd::tl -> l;;

  fool [1;2;3;4;5;6;7;8;9;10] 4 (fun x -> x mod 2 = 0)
  ;;

  let comp f g x = match g(x) with 
      n when g(x) mod x == 0 -> g(x)
    | n when f(x)*g(x)<0 -> f(x)*g(x)*(-1)
    | n when f(x)*g(x)>=0 -> f(x)*g(x)
    | n -> n;;
  
  let rec a n = 
    match n with
      0->0
    | n when b(n-1) mod 2 != 0 -> b(n-1)
    | n -> b(n)
  and b n =
    match n with
      0->0
    | n when n-1 mod 2 == 0 -> a(n-1)
    | n -> a(n);;

  let seq n = (a(n),b(n));;

*)

(*
  let foo a b f = if a == b && f(2)==3 then 3 else 2;;

  let rec a n = match n with
      0->0
    | n when b(n-1) mod 2 == 0 -> 2*b(n-1)+1
    | n -> 2*b(n-1)
  and b n = match n with
      0->1
    | n when (n-1) mod 2 != 0 -> a(n-1)+1
    | n -> a(n);;

  let seq n = (a(n),b(n));;

  let comp f g x = match g(x) with 
      n when g(x) mod x == 0 -> g(x)
    | n when f(x)*g(x)<0 -> f(x)*g(x)*(-1)
    | n when f(x)*g(x)>=0 -> f(x)*g(x);;

  let foo a b = if a==[] && b==[] then (a, b) else (a, b);;

  let foo f a = match a with
      x::y::tl when f(x) == f(x) && f(y)==f(y) -> (f(y),f(y));;

  let rec fool l n v = match l with
      []->[]
    | hd::tl when n>0 -> hd::fool tl (n-1) v
    | hd::tl when n=0 -> v::fool tl n v 
    | hd::tl -> l;;

  fool [1;2;3;4;5;6;7;8;9;10] 3 0;; *)
(*
  let foo a b c =
    match a+1 with
      n when b == c -> 3;;

  let foo int gen1 gen2 = if int == 3 && gen1 == gen2 then 1 else 1;;

  let rec a n =
    match n with
      0->0
    | n when b(n-1)<a(n-1) -> a(n-1)-b(n-1)
    | n -> a(n-1)+a(n-1)
  and b n =
    match n with
      0->1
    | n when a(n-1)<b(n-1) -> b(n-1)-a(n-1)
    | n -> b(n-1)+1;;

  let seq n = (a(n),b(n));;

  let comp f g x = match g(x+0) with
    | n when (g(x)>f(x) && f(x)>0) || (g(x)<f(x) && f(x)<0) -> g(x)-f(x)
    | n -> g(x)+f(x) ;;

  let foo li fu = match li with 
    | x::y::tl when fu(x) == fu(y) -> (fu(y),fu(y));;

  let foo a b = if a == [] && a == b then [a] else [a];;
*)(*
  let rec fool l l' n = match (l,l') with
      ([],[])->if n>0 then failwith "non ci sono abbastanza elementi!" else []
    | (hd::tl, []) -> if n>0 then hd :: fool tl [] (n-1) else []
    | ([],hd::tl) -> if n>0 then hd :: fool [] tl (n-1) else []
    | (hd1::tl1,hd2::tl2) -> if List.length(hd1::tl1) > 0 && n>0 then hd1::fool tl1 (hd2::tl2) (n-1) 
        else if List.length(hd2::tl2) > 0 && n>0 then hd2::fool [] tl2 (n-1) else [];;


  fool [1;2;3;4;5] [6;7;8;9;10] 3;;
  
  fool [1;2;3;4;5] [6;7;8;9;10] 7;;*)
(*
  let foo a b c = if a == b && c == 3 then 0 else 1;;

  let rec a n =
    match n with
      0->0
    | x when b(n-1) mod 2 != 0 -> b(n-1)
    | _ -> b(n-1)+1
  and b n =
    match n with
      0->0
    | x when (n-1) mod 2 == 0 -> a(n-1)
    | _ -> a(n-1)+1;;

  let seq n = (a n, b n);;

  seq 1 ;;

  seq 2 ;;

  seq 3 ;;
*)
(* foo: ’a list -> (’a -> ’b) -> ’b * ’b *)

let foo a b =
  let fee r = if r == 22 then 2 else 1 in 
  if a(fee, 3) == 1 && b == 2 then true else false ;;
  
  (*Es2 - Definire una funzione fool con tipo:  
 fool: 'a list -> int -> 'a -> a' list      
  in modo che fool l n v sia la lista ottenuta da l rimpiazzando gli ultimi n elementi con v, e lasciando inalterati i rimanenti. 
  Ad esempio:  fool [1;2;3;4;5;6;7;8;9;10] 3 0  = [1;2;3;4;5;6;7;0;0;0]*)
let rec fool l n v = match (l,n) with     (*primi n elementi*)
    ([],_) -> []
  | (x::l , 0) -> v::(fool l n v)
  | (x::l , _) -> x::(fool l (n-1) v);;
(*oppure*)
let fool l n v = List.fold_right (fun a b -> if List.length b < n then [v]@b else [a]@b) l [];;
fool [1;2;3;4;5;6;7;8;9;10] 3 0;;

(*Es3 - Completare la seguente definizione della funzione foof con tipo: 
  'a list -> a' list  
  let foof = List.fold_right... in modo che foof l sia la lista ottenuta da l eliminando tutti gli elementi eccetto l'ultimo. Ad esempio:
  foof [1;2;3;4;5;6;7;8;9;10] = [10]  *)
let rec foof = function
    [] -> []
  | [x] -> [x]
  | x::xs -> (foof xs);;
foof [1;2;3;4;5;6;7;8;9;10];;
   (*oppure*)
let foof l = List.fold_right (fun a b -> if List.length b = 1 then b else a::b) l [];;
foof [1;2;3;4;5;6;7;8;9;10];;



(*Esercitazione compito*)
(*Es1 - Scrivere una funzione foo con il seguente tipo: 
 ('a * 'b) list -> ('c * 'd) list -> ('b * 'a) list * ('d * 'c) list   *)
let foo a b = match (a,b) with
    (hd1::tl1, hd2::tl2) -> ( ((snd hd1),(fst hd1))::[], ((snd hd2),(fst hd2))::[] ) 
  | _ -> ([],[]);;

(*Es2 - Definire una funzione fool con il seguente tipo: 
'a list -> 'b list -> int -> ('a * 'b) list
  in modo che fool l1 l2 n sia la lista ottenuta accoppiando i primi n elementi (se presenti)  di l1 e l2 . 
  Ad esempio:
  fool [1;2;3;4] [5;6;7] 2;;
  - : (int * int) list = [(1, 5); (2, 6)]
  fool [1;2;3;4] [5;6;7] 3;;
  - : (int * int) list = [(1, 5); (2, 6); (3, 7)] *)
let rec fool l1 l2 n = match (l1,l2) with
    (hd1::tl1, hd2::tl2) -> if n>0 then (hd1, hd2)::(fool tl1 tl2 (n-1)) else []
  | (_,_) -> [];;

(*Es3 - Completare la seguente definizione di funzione: 
  let foof l  = List.fold_right…
  'a list -> ('a * int) list
in modo che foof l  sia la lista di coppie  ottenuta accoppiando ogni elemento di l con la sua posizione nella lista. 
  Ad esempio, foof [10;20;30;40;50;60] =  [(10, 1); (20, 2); (30, 3); (40, 4); (50, 5); (60, 6)];;    *)
let foof l = List.fold_right (fun a b -> (a, List.length l - List.length b):: b) l [];;
foof [10;2;5;4] ;;

  
